name: Blog Deploy

permissions:
  contents: write  # push 권한 추가

on:
  repository_dispatch:
    types: [blog-content-updated]

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      TARGET_BRANCH_HASH: ${{ github.event.client_payload.sha }}
      POST_PATH: apps/blog/content/posts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add Deploy Keys
        env:
          BLOG_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          OBSIDIAN_SSH_KEY: ${{ secrets.OBSIDIAN_FETCH_KEY }}
        run: |
          mkdir -p ~/.ssh
          eval "$(ssh-agent -s)"
           
          # Blog 레포 키 설정
          echo "$BLOG_SSH_KEY" > ~/.ssh/blog_deploy
          chmod 600 ~/.ssh/blog_deploy
          ssh-add ~/.ssh/blog_deploy
          
          # Obsidian 레포 키 설정
          echo "$OBSIDIAN_SSH_KEY" > ~/.ssh/obsidian_fetch
          chmod 600 ~/.ssh/obsidian_fetch
          ssh-add ~/.ssh/obsidian_fetch
          
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Fetch Blog Repository
        run: |
          mkdir -p ~/app/blog && cd ~/app/blog
          git init
          git remote add blog-repo git@github.com:Sangjun-man/blog.git
          GIT_SSH_COMMAND='ssh -i ~/.ssh/blog_deploy' git fetch blog-repo
          git checkout main
          GIT_SSH_COMMAND='ssh -i ~/.ssh/blog_deploy' git pull blog-repo main

      - name: Fetch Obsidian Repository
        run: |
          mkdir -p ~/app/obsidian && cd ~/app/obsidian
          git init
          GIT_SSH_COMMAND='ssh -i ~/.ssh/obsidian_fetch' git remote add obsidian-repo git@github.com:Sangjun-man/obsidian.git
          GIT_SSH_COMMAND='ssh -i ~/.ssh/obsidian_fetch' git fetch obsidian-repo
          git reset --hard ${{env.TARGET_BRANCH_HASH}}

      - name: Move and Convert Blog Posts
        run: |
          # 경로 변수 설정
          BLOG_POSTS_DIR="$HOME/app/blog/apps/blog/content/posts"

          # content/post 디렉토리 비우기
          if [ -d "$BLOG_POSTS_DIR" ]; then
              rm -rf "$BLOG_POSTS_DIR"/*
          else
              mkdir -p "$BLOG_POSTS_DIR"
          fi

          # obsidian/blog의 모든 md 파일을 content/post로 이동하면서 확장자 변경
          find ~/app/obsidian/obsidian/Blog -name "*.md" -type f | while read file; do
            # MDX 파일에서 frontmatter 내의 title 추출
            title=$(sed -n '/^---$/,/^---$/p' "$file" | grep "^title:" | sed 's/^title: *//' | tr -d '"' | tr -d "'")

            # title이 있는 경우에만 파일 복사
            if [ -n "$title" ]; then
                # title을 URL 인코딩 (Node.js 사용)
                encoded_title=$(node -e "console.log(encodeURIComponent(process.argv[1]))" "$title")
                new_filename="${encoded_title}.mdx"
                cp -f "$file" "$BLOG_POSTS_DIR/$new_filename"
            else
                echo "ERROR: No title found in frontmatter for file: $file"
            fi
          done
          
          # 변경사항 확인
          cd ~/app/blog && git status
          
          # POST_PATH 내 변경사항 확인
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

      - name: Commit and Push Changes
        run: |
          cd ~/app/blog
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add apps/blog/content/posts
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update blog content from Obsidian"
            GIT_SSH_COMMAND='ssh -i ~/.ssh/blog_deploy' git push blog-repo main
          fi

      - name: Build and Deploy
        env:
          SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_PORT: ${{ secrets.OPENED_SSH_PORT }}
          DEPLOY_COMMANDS: |
            cd /app/blog
            git fetch
            git checkout main
            git reset --hard origin/main
            pnpm i
            pnpm --filter blog build
            pm2 restart blog
        run: |
          ssh -i ~/.ssh/blog_deploy \
              -p "$SSH_PORT" \
              -o StrictHostKeyChecking=no \
              sangjunserver2@sangjun.world \
              "bash -l -c '$DEPLOY_COMMANDS'"
          rm -f ~/.ssh/blog_deploy


